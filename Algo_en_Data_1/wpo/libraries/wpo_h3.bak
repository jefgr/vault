#lang r7rs
(import (scheme base)
        (scheme write)
        (prefix (a-d positional-list augmented-double-linked-positional-list) adlp:)
        (prefix (a-d pattern-matching quicksearch) quick:))

(define (plist-display l)
  (adlp:for-each l (lambda (element)
                     (display element)
                     (display #\space)))
  (newline))


(define list (adlp:new string=?))

(adlp:add-before! list "and")
(adlp:add-after! list "me")
(adlp:add-after! list "to" (adlp:first list))
(adlp:add-after! list "goodday" (adlp:first list))
(adlp:add-before! list "hello")
(adlp:add-after! list "world" (adlp:first list))

(define (find-e plist)
  (let ((count 0))
    (adlp:for-each plist (lambda (element)
                           (if (quick:match element (string #\e))
                               (set! count (+ count 1)))))
    count))

